- name: Create templated_node_vars and templated_node_kinds variable
  vars:
    templated_node_vars: |
      {% set nodes = {} %}
      {% for node, node_values in topology.nodes.items() | default({}) %}
      {% if node_values.kind == 'templated' %}
      {% set _ = nodes.update({node: node_values}) %}
      {% endif %}
      {% endfor %}
      {{ nodes }}
    templated_node_kinds: |
      {% set kinds = [] %}
      {% for node, node_values in topology.nodes.items() | default({}) %}
      {% if node_values.kind == 'templated' %}
      {% set _ = kinds.append(node_values.nos) %}
      {% endif %}
      {% endfor %}
      {{ kinds | unique }}
  ansible.builtin.set_fact:
    templated_nodes: {}
    templated_node_vars: "{{ templated_node_vars }}"
    templated_node_kinds: "{{ templated_node_kinds }}"

- name: Call kind-specific tasks
  when: templated_node_vars | length and templated_node_kinds | length
  loop: "{{ templated_node_kinds }}"
  loop_control:
    loop_var: templated_node_kind
  ansible.builtin.include_tasks:
    file: "tasks/templated_node_vars/{{ templated_node_kind }}/create_templated_node.yaml"
